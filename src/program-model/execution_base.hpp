#pragma once

//--------------------------------------------------------------------------------------90
/// @file execution_base.hpp
/// @author Susanne van den Elsen
/// @date 2015
//----------------------------------------------------------------------------------------

namespace program_model
{
   //-------------------------------------------------------------------------------------
   
   class ExecutionBase
   {
   public:
      
      //----------------------------------------------------------------------------------
		
		using index_t = unsigned int;
      
      //----------------------------------------------------------------------------------
        
      enum class Status { RUNNING = 0, DONE = 1, DEADLOCK = 2, BLOCKED = 3, ERROR = 4 };
      
      //----------------------------------------------------------------------------------
      
      /// @brief Constructor.
      
      explicit ExecutionBase(const unsigned int nr_threads);
      
      //----------------------------------------------------------------------------------
      
      /// @brief Getter.
      
      unsigned nr_threads() const;
      
      //----------------------------------------------------------------------------------
      
      /// @brief Getter.
      
      const Status& status() const;
      
      //----------------------------------------------------------------------------------
      
      /// @brief Setter.
      
      void set_status(const Status& status);
      
      //----------------------------------------------------------------------------------
      
      /// @brief Getter.
		
		bool contains_locks() const;
      
      //----------------------------------------------------------------------------------
      
      /// @brief Setter.
      
		void set_contains_locks();
      
      //----------------------------------------------------------------------------------
        
   private:
        
      //----------------------------------------------------------------------------------
      
      /// @brief The number of threads in the program to which this Execution belongs.
      
      unsigned int mNrThreads;
      
      //----------------------------------------------------------------------------------
      
      /// @brief The (current/termination) status of the Execution object.

      Status mStatus;
		
      //----------------------------------------------------------------------------------
      
		bool mContainsLocks;
      
      //----------------------------------------------------------------------------------
      
   }; // end class ExecutionBase
   
   //-------------------------------------------------------------------------------------
   
} // end namespace program_model
